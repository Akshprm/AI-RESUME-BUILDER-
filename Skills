// src/dashboard/resume/components/forms/Skills.jsx 
import { Input } from '@/components/ui/input' 
import React, { useContext, useEffect, useState } from 'react' 
import { Rating } from '@smastrom/react-rating' 
import '@smastrom/react-rating/style.css' 
import { Button } from '@/components/ui/button' 
import { LoaderCircle } from 'lucide-react' 
import { ResumeInfoContext } from '@/context/ResumeInfoContext' 
import GlobalApi from './../../../../../service/GlobalApi' 
import { useParams } from 'react-router-dom' 
import { toast } from 'sonner' 
 
function Skills() { 
    const [skillsList, setSkillsList] = useState([{ 
        name: '', 
        rating: 0 
    }]) 
    const {resumeId} = useParams() 
    const [loading, setLoading] = useState(false) 
    const {resumeInfo, setResumeInfo} = useContext(ResumeInfoContext) 
    
    useEffect(() => { 
        if (resumeInfo?.skills) { 
            setSkillsList(resumeInfo.skills) 
        } 
    }, [resumeInfo]) 
    
    const handleChange = (index, name, value) => { 
        const newEntries = skillsList.slice() 
        if (name === 'rating') { 
  
 
            const percentage = Math.round((value / 5) * 100) 
            newEntries[index][name] = percentage 
            setResumeInfo({ 
                ...resumeInfo, 
                skills: newEntries 
            }) 
        } else { 
            newEntries[index][name] = value 
        } 
        setSkillsList(newEntries) 
    } 
 
 
    const AddNewSkills = () => { 
        setSkillsList([...skillsList, { 
            name: '', 
            rating: 0  
        }]) 
    } 
 
    const RemoveSkills = () => { 
        if (skillsList.length > 1) { 
            setSkillsList(skillsList => skillsList.slice(0, -1)) 
        } 
    } 
 
    const onSave = () => { 
        if (!skillsList.some(skill => skill.name)) { 
            toast.error('Please add at least one skill') 
            return 
        } 
 
  
 
        setLoading(true) 
        const data = { 
            data: { 
                skills: skillsList.map(({ id, ...rest }) => rest) 
            } 
        } 
 
        GlobalApi.UpdateResumeDetail(resumeId, data) 
            .then(resp => { 
                console.log(resp) 
                setLoading(false) 
                toast.success('Skills updated successfully!') 
            }) 
            .catch(error => { 
                console.error('Error saving:', error) 
                setLoading(false) 
                toast.error('Server Error, Try again!') 
            }) 
    } 
 
    useEffect(() => { 
        setResumeInfo({ 
            ...resumeInfo, 
            skills: skillsList 
        }) 
 
    }, [skillsList, resumeInfo, setResumeInfo]) 
    return ( 
        <div className='p-5 shadow-lg rounded-lg border-t-primary border-t-4 mt-10'> 
            <h2 className='font-bold text-lg'>Skills</h2> 
            <p>Add Your top professional key skills</p> 
            <div className='space-y-3 mt-4'> 
  
 
                {skillsList.map((item, index) => ( 
                    <div key={index} className='flex justify-between border rounded-lg p-3'> 
                        <div className='flex-1 mr-4'> 
                            <label className='block text-sm font-medium mb-1'>Skill Name</label> 
                            <Input  
                                className="w-full" 
                                value={item.name} 
                                onChange={(e) => handleChange(index, 'name', e.target.value)} 
                                placeholder="Enter skill name" 
                            /> 
                        </div> 
                        <div className='flex items-center gap-2'> 
                            <label className='block text-sm font-medium mb-1'>Rating</label> 
                            <Rating  
                                style={{ maxWidth: 120 }}  
                                value={item.rating ? (item.rating / 100) * 5 : 0}  
                                onChange={(v) => handleChange(index, 'rating', v)} 
                                items={5} 
                            /> 
                            <span className='text-sm text-gray-500 min-w-[3rem]'>{item.rating}%</span> 
                        </div> 
                    </div> 
                ))} 
            </div> 
            <div className='flex justify-between mt-6'> 
                <div className='flex gap-2'> 
                    <Button  
                        variant="outline"  
                        onClick={AddNewSkills}  
                        className="text-primary" 
                    > 
                        + Add More Skill 
  
 
                    </Button> 
                    <Button  
                        variant="outline"  
                        onClick={RemoveSkills} 
                        disabled={skillsList.length <= 1} 
 
                        className="text-primary" 
                    > 
                        - Remove 
                    </Button> 
                </div> 
                <Button  
                    disabled={loading || skillsList.length === 0}  
                    onClick={onSave} 
                > 
                    {loading ? <LoaderCircle className='animate-spin' /> : 'Save'} 
                </Button> 
            </div> 
        </div> 
    ) 
} 
 
export default Skills
