// src/dashboard/resume/components/forms/Education.jsx 
import { Button } from '@/components/ui/button' 
import { Input } from '@/components/ui/input' 
import { Textarea } from '@/components/ui/textarea' 
import { ResumeInfoContext } from '@/context/ResumeInfoContext' 
import { LoaderCircle } from 'lucide-react' 
import React, { useContext, useEffect, useState } from 'react' 
import { useParams } from 'react-router-dom' 
import GlobalApi from './../../../../../service/GlobalApi' 
import { toast } from 'sonner' 
 
function Education() { 
    const [loading, setLoading] = useState(false) 
    const {resumeInfo, setResumeInfo} = useContext(ResumeInfoContext) 
    const params = useParams() 
    const [educationalList, setEducationalList] = useState([ 
        { 
            universityName: '', 
            degree: '', 
            major: '', 
            startDate: '', 
            endDate: '', 
            description: '' 
        } 
    ]) 
 
    useEffect(() => { 
        if (resumeInfo?.education) { 
            setEducationalList(resumeInfo.education) 
        } 
  
 
    }, [resumeInfo]) 
 
    const handleChange = (event, index) => { 
        const newEntries = educationalList.slice() 
        const {name, value} = event.target 
        newEntries[index][name] = value 
        setEducationalList(newEntries) 
    } 
 
    const AddNewEducation = () => { 
        setEducationalList([...educationalList, 
            { 
 
                universityName: '', 
                degree: '', 
                major: '', 
                startDate: '', 
                endDate: '', 
                description: '' 
            } 
        ]) 
    } 
 
    const RemoveEducation = () => { 
        if (educationalList.length > 1) { 
            setEducationalList(educationalList => educationalList.slice(0, -1)) 
        } 
    } 
 
    const onSave = () => { 
        if (!educationalList.some(edu => edu.universityName && edu.degree)) { 
            toast.error('Please fill in at least university name and degree') 
  
 
            return 
        } 
 
        setLoading(true) 
        const data = { 
            data: { 
                education: educationalList.map(({ id, ...rest }) => rest) 
            } 
        } 
 
        GlobalApi.UpdateResumeDetail(params.resumeId, data) 
            .then(resp => { 
                console.log(resp) 
                setLoading(false) 
                toast.success('Education details updated successfully!') 
            }) 
            .catch(error => { 
                console.error('Error saving:', error) 
                setLoading(false) 
                toast.error('Server Error, Please try again!') 
            }) 
    } 
 
    useEffect(() => { 
        setResumeInfo({ 
 
            ...resumeInfo, 
            education: educationalList 
        }) 
    }, [educationalList, resumeInfo, setResumeInfo]) 
 
    return ( 
  
 
        <div className='p-5 shadow-lg rounded-lg border-t-primary border-t-4 mt-10'> 
            <h2 className='font-bold text-lg'>Education</h2> 
            <p>Add Your educational details</p> 
            <div className='space-y-4 mt-4'> 
                {educationalList.map((item, index) => ( 
                    <div key={index} className='border rounded-lg p-4'> 
                        <div className='grid grid-cols-2 gap-4'> 
                            <div className='col-span-2'> 
                                <label className='block text-sm font-medium mb-1'>University 
Name</label> 
                                <Input  
                                    name="universityName"  
                                    onChange={(e) => handleChange(e, index)} 
                                    value={item.universityName || ''} 
                                    placeholder="Enter university name" 
                                /> 
                            </div> 
                            <div> 
                                <label className='block text-sm font-medium mb-1'>Degree</label> 
                                <Input  
                                    name="degree"  
                                    onChange={(e) => handleChange(e, index)} 
                                    value={item.degree || ''} 
                                    placeholder="Enter degree" 
                                /> 
                            </div> 
                            <div> 
                                <label className='block text-sm font-medium mb-1'>Major</label> 
                                <Input  
                                    name="major"  
                                    onChange={(e) => handleChange(e, index)} 
                                    value={item.major || ''} 
  
 
                                    placeholder="Enter major" 
                                /> 
                            </div> 
                            <div> 
                                <label className='block text-sm font-medium mb-1'>Start Date</label> 
                                <Input  
 
                                    type="date"  
                                    name="startDate"  
                                    onChange={(e) => handleChange(e, index)} 
                                    value={item.startDate || ''} 
                                /> 
                            </div> 
                            <div> 
                                <label className='block text-sm font-medium mb-1'>End Date</label> 
                                <Input  
                                    type="date"  
                                    name="endDate"  
                                    onChange={(e) => handleChange(e, index)} 
                                    value={item.endDate || ''} 
                                /> 
                            </div> 
                            <div className='col-span-2'> 
                                <label className='block text-sm font-medium mb-1'>Description</label> 
                                <Textarea  
                                    name="description"  
                                    onChange={(e) => handleChange(e, index)} 
                                    value={item.description || ''} 
                                    placeholder="Enter description" 
                                /> 
                            </div> 
                        </div> 
  
 
                    </div> 
                ))} 
            </div> 
            <div className='flex justify-between mt-6'> 
                <div className='flex gap-2'> 
                    <Button  
                        variant="outline"  
                        onClick={AddNewEducation}  
                        className="text-primary" 
                    > 
                        + Add More Education 
                    </Button> 
                    <Button  
                        variant="outline"  
                        onClick={RemoveEducation} 
                        disabled={educationalList.length <= 1} 
                        className="text-primary" 
                    > 
                        - Remove 
 
                    </Button> 
                </div> 
                <Button  
                    disabled={loading || educationalList.length === 0}  
                    onClick={onSave} 
                > 
                    {loading ? <LoaderCircle className='animate-spin' /> : 'Save'} 
                </Button> 
            </div> 
        </div> 
    ) 
} 
  
 
 
export default Education
