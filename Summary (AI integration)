// src/dashboard/resume/components/forms/Summery.jsx 
import { Button } from '@/components/ui/button' 
import { Textarea } from '@/components/ui/textarea' 
import { ResumeInfoContext } from '@/context/ResumeInfoContext' 
import React, { useContext, useEffect, useState } from 'react' 
import { useParams } from 'react-router-dom' 
import GlobalApi from './../../../../../service/GlobalApi' 
import { Brain, LoaderCircle } from 'lucide-react' 
import { AIChatSession } from './../../../../../service/AIModal' 
 
const prompt = `Job Title: {jobTitle} 
Please provide 3 different resume summaries in JSON format for different experience levels 
(Fresher, Mid Level, Senior Level). Each summary should be 3-4 lines. 
Return the response in this exact format: 
{ 
  "summaries": [ 
    {"experience_level": "Fresher", "summary": "..."}, 
    {"experience_level": "Mid Level", "summary": "..."}, 
    {"experience_level": "Senior Level", "summary": "..."} 
  ] 
}` 
 
function Summery({enabledNext}) { 
    const {resumeInfo, setResumeInfo} = useContext(ResumeInfoContext) 
    const [summery, setSummery] = useState() 
    const [loading, setLoading] = useState(false) 
    const params = useParams() 
    const [aiGeneratedSummeryList, setAiGenerateSummeryList] = useState([]) 
 
    useEffect(() => { 
  
 
        if(summery) { 
            setResumeInfo({ 
                ...resumeInfo, 
                summery: summery 
            }) 
        } 
    }, [summery]) 
 
    const GenerateSummeryFromAI = async() => { 
        setLoading(true) 
        const PROMPT = prompt.replace('{jobTitle}', resumeInfo?.jobTitle || 'Software Developer') 
 
 
        const result = await AIChatSession.sendMessage(PROMPT) 
 
        const parsedResponse = JSON.parse(result.response.candidates[0].content.parts[0].text) 
        if (parsedResponse.summaries && Array.isArray(parsedResponse.summaries)) { 
            setAiGenerateSummeryList(parsedResponse.summaries) 
        } else if (Array.isArray(parsedResponse)) { 
            setAiGenerateSummeryList(parsedResponse) 
        } 
        setLoading(false) 
    } 
 
    const onSave = (e) => { 
        e.preventDefault() 
        if (!summery) return 
        setLoading(true) 
        const data = { 
            data: { 
                summery: summery 
            } 
  
 
        } 
        GlobalApi.UpdateResumeDetail(params?.resumeId, data) 
            .then(resp => { 
                enabledNext(true) 
                setLoading(false) 
            }) 
    } 
 
    return ( 
        <div> 
            <div className='p-5 shadow-lg rounded-lg border-t-primary border-t-4 mt-10'> 
                <h2 className='font-bold text-lg'>Summary</h2> 
                <p>Add a professional summary for your job title</p> 
                <form className='mt-7' onSubmit={onSave}> 
                    <div className='flex justify-between items-end'> 
                        <label>Add Summary</label> 
                        <Button  
                            variant="outline"  
                            onClick={GenerateSummeryFromAI} 
                            disabled={loading || !resumeInfo?.jobTitle} 
                            type="button"  
                            size="sm"  
                            className="border-primary text-primary flex gap-2" 
                        >  
                            <Brain className='h-4 w-4' /> 
 
                            {loading ? 'Generating...' : 'Generate from AI'} 
                        </Button> 
                    </div> 
                    <Textarea  
                        className="mt-5"  
                        required 
  
 
                        value={summery || resumeInfo?.summery || ''} 
                        onChange={(e) => setSummery(e.target.value)} 
                        placeholder="Enter your professional summary here..." 
                    /> 
                    <div className='mt-2 flex justify-end'> 
                        <Button  
                            type="submit" 
                            disabled={loading || !summery} 
                        > 
                            {loading ? <LoaderCircle className='animate-spin' /> : 'Save'} 
                        </Button> 
                    </div> 
                </form> 
            </div> 
            {aiGeneratedSummeryList && aiGeneratedSummeryList.length > 0 && ( 
                <div className='my-5'> 
                    <h2 className='font-bold text-lg'>AI Generated Suggestions</h2> 
                    <p className='text-sm text-gray-500 mb-4'>Click on any suggestion to use it</p> 
                    {aiGeneratedSummeryList.map((item, index) => ( 
                        <div  
                            key={index}  
                            onClick={() => setSummery(item?.summary)} 
                            className='p-5 shadow-lg my-4 rounded-lg cursor-pointer hover:shadow-xl 
transition-shadow' 
                        > 
                            <h2 className='font-bold my-1 text-primary'> 
                                Level: {item?.experience_level || 'Not Specified'} 
                            </h2> 
                            <p>{item?.summary}</p> 
                        </div> 
                    ))} 
                </div> 
  
 
            )} 
        </div> 
    ) 
} 
 
export default Summery
